package com.example.demo.designpattern.strategypattern;

/**
 * 策略模式属于对象的行为模式。其用意是针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。策略模式使得算法可以在不影响到客户端的情况下发生变化。

 　　策略模式把一个系列的算法封装到一个系列的具体策略类里面，作为一个抽象策略类的子类或策略接口的实现类。简单地说：准备一组算法，并将每一个算法封装起来，使它们可以互换。

 环境(Context)角色：持有一个Strategy抽象策略类或策略接口的引用。

 　　抽象策略(Strategy)角色：这是一个抽象角色，由一个接口或抽象类实现。此角色声明所有的具体策略类需要重写的方法。

 　　具体策略(Concrete Strategy)角色：封装了相关的算法或行为


 使用场景实例：

 　　假设某个网站销售各种书籍，对初级会员没有提供折扣，对中级会员提供每本10%的促销折扣，对高级会员提供每本20%的促销折扣。

 　　折扣是根据以下的3个算法中的1个进行的：

 　　算法1：对初级会员没有提供折扣。

 　　算法2：对中级会员提供10%的促销折扣。

 　　算法3：对高级会员提供20%的促销折扣。

 */
public class Notice {
}
